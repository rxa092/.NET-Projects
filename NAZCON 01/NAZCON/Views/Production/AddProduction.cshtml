@model NAZCON.Models.ViewModel.Production
@using NAZCON.Models.Business_Layer
@using NAZCON.Models.EntityModel
@using NAZCON.Models.ViewModel
@{
    ViewBag.Title = "AddProduction";
}

<h2>AddProduction</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Production</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.date, new { htmlAttributes = new { @class = "form-control",@type  = "date" } })
                @Html.ValidationMessageFor(model => model.date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.ProductId, new ItemBussiness().show_all().Select(ls => new SelectListItem() { Text = ls.description, Value = ls.id.ToString() }), new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Agradesteelpallets, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Agradesteelpallets, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Agradesteelpallets, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.agradeunits, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.agradeunits, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.agradeunits, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bgradeunits, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bgradeunits, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bgradeunits, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bgradesteelpallets, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bgradesteelpallets, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bgradesteelpallets, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bokenbymachinepallets, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bokenbymachinepallets, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bokenbymachinepallets, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.brokenbymachineunits, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.brokenbymachineunits, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.brokenbymachineunits, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.brokenbyoperatorpallets, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.brokenbyoperatorpallets, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.brokenbyoperatorpallets, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.brokenbyoperatorunits, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.brokenbyoperatorunits, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.brokenbyoperatorunits, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.actualcycletime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.actualcycletime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.actualcycletime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.size, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.size, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.size, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.weight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.weight, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.weight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.remarks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.remarks, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.remarks, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.shiftinchargeid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.shiftinchargeid, new EmployeeBusiness().GetSpecificEmployee("Shift Incharge ").Select(ls => new SelectListItem() { Text = ls.ename, Value = ls.empid.ToString() }), new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.actualstarttime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.actualstarttime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.actualstarttime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.efficiency100, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.efficiency100, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.efficiency100, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.opening, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.opening, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.opening, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.recieving, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.recieving, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.recieving, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.consumption, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.consumption, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.consumption, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.balance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.balance, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.balance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.totalmixes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.totalmixes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.totalmixes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.mixweight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.mixweight, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.mixweight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.singlepieceweight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.singlepieceweight, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.singlepieceweight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.noofpiecesinonepallet, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.noofpiecesinonepallet, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.noofpiecesinonepallet, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.noofpiecesinonemix, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.noofpiecesinonemix, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.noofpiecesinonemix, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.noofplatesinonemix, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.noofplatesinonemix, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.noofplatesinonemix, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.rawmaterial.RMId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.rawmaterial.RMId, new RawMaterialBusiness().ShowRawMaterial().Select(ls => new SelectListItem() { Text = ls.Name, Value = ls.Id.ToString() }), new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.rawmaterial.TotalWeightInSingleMix, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rawmaterial.TotalWeightInSingleMix, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.rawmaterial.TotalWeightInSingleMix, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Finish Report" class="btn btn-default" onclick="@("window.location.href='"+Url.Action("ShowProduction","Production")+"'");" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add Another Raw Material" class="btn btn-default"  />
            </div>
        </div>
    </div>
    

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
